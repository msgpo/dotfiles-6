#!/usr/bin/env stack
-- stack --resolver lts-14.12 script
-- vim: ft=haskell
module Main (main) where

import Control.Monad (void)
import Data.Void
import Data.Foldable (traverse_)
import System.Exit (die)
import System.Process (readProcess)
import Text.Megaparsec
import Text.Megaparsec.Char

type Parser = Parsec Void String

unsafeParse :: Parser a -> String -> String -> IO a
unsafeParse p s = either (die . errorBundlePretty) pure . parse p s

data Mute = Muted | Unmuted deriving Show
data Sink = Sink String Mute Int deriving Show

main :: IO ()
main = do
    output <- readProcess "pactl" ["list", "sinks"] ""
    result <- unsafeParse parseSinks "<pactl-list-sinks>" output
    traverse_ print result

parseSinks :: Parser [Sink]
parseSinks = some $ parseSink <* skipTill (eol *> eol)

parseSink :: Parser Sink
parseSink = Sink
    <$> "Description" ~> rest
    <*> "Mute" ~> mute
    <*> "Volume" ~> volume

(~>) :: String -> Parser a -> Parser a
name ~> p = skipTill (string $ name <> ": ") *> p

rest :: Parser String
rest = someTill anySingle eol

mute :: Parser Mute
mute = choice [Muted <$ string "yes", Unmuted <$ string "no"]

volume :: Parser Int
volume = read <$> do
    skipTill (string "/")
    space *> some digitChar <* char '%'

skipTill :: Parser a -> Parser ()
skipTill p = void $ manyTill anySingle $ try (void p) <|> eof
