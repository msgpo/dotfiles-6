#!/usr/bin/env stack
-- stack script --resolver lts-11.16
-- vim: ft=haskell
{-# OPTIONS_GHC -Wall -Werror #-}

module Main (main) where

import Control.Monad (foldM)
import Data.List (stripPrefix)
import Data.Maybe (fromMaybe)
import Data.Monoid ((<>))
import System.Environment (getEnv)
import System.FilePath ((</>), dropExtension)
import System.Process (readProcess)

import qualified Data.Map as M

main :: IO ()
main = do
    store <- (</> ".password-store/") <$> getEnv "HOME"
    names <- map (dropExtension . dropPrefix store) . lines
        <$> readProcess "find" [store, "-type", "f", "-name", "*.gpg"] ""

    let total = length names

    passwords <- foldM (\m name -> do
        progress (sum $ map length $ M.elems m) total
        password <- readProcess "pass" [name] ""
        return $ M.insertWith (<>) password [name] m) M.empty names

    progress total total
    putStrLn ""

    mapM_ (putStrLn . ("Duplicate found: " <>) . show)
        $ (M.elems . M.filter ((> 1) . length)) passwords

dropPrefix :: Eq a => [a] -> [a] -> [a]
dropPrefix p x = fromMaybe x $ stripPrefix p x

progress :: Int -> Int -> IO ()
progress c t = putStr $ "\r"
    <> "Reading passwords... "
    <> "[" <> show c
    <> "/" <> show t
    <> "]"
