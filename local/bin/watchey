#!/usr/bin/env stack
-- stack script --resolver lts-11.15
-- vim: ft=haskell
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wall -Werror #-}

module Main (main) where

import Data.Foldable
import Control.Exception.Safe
import qualified Data.Text.IO as T
import qualified Data.Vector as V
import GitHub
import GitHub.Endpoints.Activity.Watching
import GitHub.Endpoints.Repos

main :: IO ()
main = traverse_ putRepo =<< reposToWatch "pbrisbin"

putRepo :: Repo -> IO ()
putRepo = T.putStrLn . getUrl . repoHtmlUrl

reposToWatch :: Name Owner -> IO (V.Vector Repo)
reposToWatch user =
    (\watched repos -> V.filter (`V.notElem` watched) repos)
        <$> (untry =<< reposWatchedBy user)
        <*> (untry =<< userRepos user RepoPublicityOwner)

untry :: (MonadThrow m, Show e) => Either e a -> m a
untry = either (throwString . show) pure
